{"componentChunkName":"component---src-templates-blog-details-js","path":"/blogs/deploying-django-application-to-aws","result":{"data":{"markdownRemark":{"html":"<p><a href=\"/pdf/Django%20on%20AWS.pdf\">Download as pdf</a></p>\n<h3>Prerequisite:</h3>\n<ul>\n<li>A <a href=\"/blogs/creating-a-django-project-from-scratch\">django application</a> created and pushed to github</li>\n<li><a href=\"https://console.aws.amazon.com/\">An aws account</a></li>\n</ul>\n<blockquote>\n<p>Note: For this demo</p>\n<ul>\n<li>Project name: aws_demo_project</li>\n<li>main folder : django_aws_demo</li>\n</ul>\n</blockquote>\n<h2>Create an aws instance</h2>\n<ul>\n<li>create an instance of ubuntu 20.04 instance</li>\n<li>download and save the .pem file provided by them</li>\n<li>connect to instance through ssh</li>\n</ul>\n<p>Installing mysql in the server</p>\n<pre><code class=\"language-bash\">sudo apt-get update \nsudo apt-get upgrade\n\nsudo apt install mysql-server\nsudo mysql_secure_installation\n\nsudo mysql\nCREATE USER 'rahul'@'localhost' IDENTIFIED BY '123456';\nGRANT ALL PRIVILEGES ON * . * TO 'rahul'@'localhost';\n\n</code></pre>\n<p>Lets install python virtual env</p>\n<pre><code class=\"language-bash\">sudo apt-get install python3-venv\n</code></pre>\n<p>clone the repository of django project you created, here for demo</p>\n<pre><code class=\"language-bash\">git clone https://github.com/rawho/django_aws_demo.git\n</code></pre>\n<p>Create a virtual env and activate it:</p>\n<pre><code class=\"language-bash\">python3 -m venv env\nsource env/bin/activate\n\n</code></pre>\n<p>Install all the requirements</p>\n<pre><code class=\"language-bash\">pip install -r requirements.txt\n</code></pre>\n<blockquote>\n<p>If this shows any errorÂ </p>\n<pre><code class=\"language-bash\">sudo apt-get install python-dev python3-dev\nsudo apt-get install libmysqlclient-dev  \npip install -r requirements.txt\n</code></pre>\n</blockquote>\n<p>Then create a database :</p>\n<pre><code class=\"language-bash\">mysql -u rahul -p\n\n# Lets create a database\nCREATE DATABASE aws_demo_db;\n\n</code></pre>\n<p>mysql username, password, db name should match with the code that we cloned</p>\n<p>then lets migrate the database</p>\n<pre><code class=\"language-bash\">python manage.py makemigrations\npython manage.py migrate\n</code></pre>\n<h2>Setting up the server</h2>\n<pre><code class=\"language-bash\">pip install gunicorn\nsudo apt-get install nginx\n</code></pre>\n<p>Then allow the http, https, 8000 traffic in the inbound rule</p>\n<pre><code class=\"language-bash\">gunicorn --bind 0.0.0.0:8000 aws_demo_project.wsgi:application\n</code></pre>\n<p>When the terminal is closed the application also stops working</p>\n<p>There the supervisor comes into play</p>\n<pre><code class=\"language-bash\">sudo apt-get install supervisor\n</code></pre>\n<h3>Lets configure the Supervisor</h3>\n<pre><code class=\"language-bash\">cd /etc/supervisor/conf.d/\nsudo touch gunicorn.conf\n</code></pre>\n<p>copy this in <code>gunicorn.conf</code> file:</p>\n<pre><code>[program:gunicorn]\ndirectory=/home/ubuntu/django_aws_demo\ncommand=/home/ubuntu/env/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/django_aws_demo/app.sock aws_demo_project.wsgi:application\n\nautostart=true\nautorestart=true\nstderr_logfile=/var/log/gunicorn/gunicorn.err.log\nstdout_logfile=/var/log/gunicorn/gunicorn.out.log\n\n[group:guni]\nprograms:gunicorn\n\n</code></pre>\n<pre><code>sudo mkdir /var/log/gunicorn\nsudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl status\n</code></pre>\n<h3>Lets configure the nginx</h3>\n<pre><code class=\"language-bash\">cd /etc/nginx/sites-available/\nsudo touch django.conf\n</code></pre>\n<p>copy this in <code>django.conf</code></p>\n<pre><code class=\"language-nginx\">server {\n        client_max_body_size 4G;\n        server_name ec2-3-89-131-161.compute-1.amazonaws.com githubstats.xyz www.githubstats.xyz 3.89.131.161;\n\n        location / {\n                include proxy_params;\n                proxy_pass http://unix:/home/ubuntu/django_aws_demo/app.sock;\n        }\n        location / {\n                autoindex on;\n                alias /home/ubuntu/django_aws_demo/;\n        }\n        location /media/ {\n                autoindex on;\n                alias /home/ubuntu/django_aws_demo/media/;\n        }\n\n}\n</code></pre>\n<pre><code>sudo nginx -t\nsudo ln django.conf /etc/nginx/sites-enabled/\n</code></pre>\n<pre><code>sudo service nginx reload\nsudo service supervisor reload\n</code></pre>\n<p>if you go to the ip adress you can see the application</p>\n<ul>\n<li><a href=\"/blogs/deploying-django-application-to-heroku\">deploy django app to Heroku</a></li>\n</ul>","frontmatter":{"title":"Deploy Django application to AWS","description":"Are you worried of deploying a django application, In this blog you can see how to deploy django app to aws"}}},"pageContext":{"slug":"deploying-django-application-to-aws"}},"staticQueryHashes":[]}